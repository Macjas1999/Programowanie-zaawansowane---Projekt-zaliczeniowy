@model List<Projekt_zaliczeniowy.Models.Payment>

@{
    ViewData["Title"] = "Zarządzanie płatnościami";
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h2>Zarządzanie płatnościami</h2>
            <p class="text-muted">Przeglądaj i edytuj płatności w systemie</p>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Data płatności</th>
                            <th>Lekcja</th>
                            <th>Nauczyciel</th>
                            <th>Uczeń</th>
                            <th>Kwota</th>
                            <th>Status</th>
                            <th>Metoda</th>
                            <th>Akcje</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in Model)
                        {
                            <tr>
                                <td>@payment.PaymentDate.ToString("dd.MM.yyyy HH:mm")</td>
                                <td>
                                    @payment.Lesson.Name<br />
                                    <small class="text-muted">@payment.Lesson.StartTime.ToString("dd.MM.yyyy HH:mm")</small>
                                </td>
                                <td>@($"{payment.Lesson.Teacher.FirstName} {payment.Lesson.Teacher.LastName}")</td>
                                <td>@($"{payment.Lesson.Student.FirstName} {payment.Lesson.Student.LastName}")</td>
                                <td>@payment.Amount.ToString("C")</td>
                                <td>
                                    <span class="badge bg-@GetStatusBadgeClass(payment.Status)">
                                        @GetStatusText(payment.Status)
                                    </span>
                                </td>
                                <td>@GetPaymentMethodText(payment.Method)</td>
                                <td>
                                    <div class="btn-group">
                                        <a href="@Url.Action("EditPayment", new { id = payment.Id })" 
                                           class="btn btn-sm btn-primary">
                                            <i class="fas fa-edit"></i> Edytuj
                                        </a>
                                        <button type="button" 
                                                class="btn btn-sm btn-danger" 
                                                onclick="confirmDelete(@payment.Id)">
                                            <i class="fas fa-trash"></i> Usuń
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal potwierdzenia usunięcia -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Potwierdź usunięcie</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Czy na pewno chcesz usunąć tę płatność?</p>
                <p class="text-danger">Ta operacja jest nieodwracalna!</p>
            </div>
            <div class="modal-footer">
                <form id="deleteForm" method="post">
                    @Html.AntiForgeryToken()
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                    <button type="submit" class="btn btn-danger">Usuń</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .table td {
            vertical-align: middle;
        }
    </style>
}

@section Scripts {
    <script>
        function confirmDelete(paymentId) {
            document.getElementById('deleteForm').action = '/Admin/DeletePayment/' + paymentId;
            new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
        }

        // Automatically close alerts after 5 seconds
        setTimeout(function() {
            $('.alert').alert('close');
        }, 5000);
    </script>
}

@functions {
    string GetStatusBadgeClass(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Pending => "warning",
            PaymentStatus.Completed => "success",
            PaymentStatus.Failed => "danger",
            PaymentStatus.Refunded => "info",
            _ => "secondary"
        };
    }

    string GetStatusText(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Pending => "Oczekująca",
            PaymentStatus.Completed => "Opłacona",
            PaymentStatus.Failed => "Nieudana",
            PaymentStatus.Refunded => "Zwrócona",
            _ => "Nieznany"
        };
    }

    string GetPaymentMethodText(PaymentMethod method)
    {
        return method switch
        {
            PaymentMethod.CreditCard => "Karta kredytowa",
            PaymentMethod.BankTransfer => "Przelew",
            PaymentMethod.Cash => "Gotówka",
            _ => "Nieznana"
        };
    }
} 