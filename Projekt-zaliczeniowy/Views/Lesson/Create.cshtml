@model Projekt_zaliczeniowy.Models.Lesson

@{
    ViewData["Title"] = "Utwórz nową lekcję";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Utwórz nową lekcję</h4>
                </div>
                <div class="card-body">
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger">
                            <h5>Wystąpiły błędy:</h5>
                            <div asp-validation-summary="All" class="text-danger"></div>
                        </div>
                    }

                    <form asp-action="Create" method="post" id="createLessonForm">
                        <div class="mb-3">
                            <label asp-for="Name" class="form-label">Nazwa przedmiotu</label>
                            <input asp-for="Name" class="form-control" required />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="StudentId" class="form-label">Uczeń</label>
                            <select asp-for="StudentId" class="form-select" required>
                                <option value="">Wybierz ucznia</option>
                                @foreach (var student in ViewBag.Students)
                                {
                                    <option value="@student.Id">@student.Name</option>
                                }
                            </select>
                            <span asp-validation-for="StudentId" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="StartTime" class="form-label">Data i godzina rozpoczęcia</label>
                            <input asp-for="StartTime" class="form-control" type="datetime-local" required />
                            <span asp-validation-for="StartTime" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="EndTime" class="form-label">Data i godzina zakończenia</label>
                            <input asp-for="EndTime" class="form-control" type="datetime-local" required />
                            <span asp-validation-for="EndTime" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Price" class="form-label">Cena (Format: 0.00)(PLN)</label>
                            <input asp-for="Price" class="form-control" type="number" step="0.01" min="0" required />
                            <span asp-validation-for="Price" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label">Notatki</label>
                            <textarea asp-for="Notes" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" id="submitButton">Utwórz lekcję</button>
                            <a asp-controller="Teacher" asp-action="Index" class="btn btn-secondary">Anuluj</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function () {
            // Initialize datetime-local inputs with current date/time
            var now = new Date();
            now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
            $('#StartTime').attr('min', now.toISOString().slice(0,16));

            $('#createLessonForm').submit(function (e) {
                var startTime = new Date($('#StartTime').val());
                var endTime = new Date($('#EndTime').val());
                var isValid = true;
                
                // Clear previous error messages
                $('.validation-error').remove();
                
                if (endTime <= startTime) {
                    e.preventDefault();
                    isValid = false;
                    $('#EndTime').after('<div class="text-danger validation-error">Czas zakończenia musi być późniejszy niż czas rozpoczęcia.</div>');
                }
                
                if (startTime < now) {
                    e.preventDefault();
                    isValid = false;
                    $('#StartTime').after('<div class="text-danger validation-error">Nie można utworzyć lekcji w przeszłości.</div>');
                }

                var price = parseFloat($('#Price').val());
                if (price <= 0) {
                    e.preventDefault();
                    isValid = false;
                    $('#Price').after('<div class="text-danger validation-error">Cena musi być większa niż 0.</div>');
                }

                if (!isValid) {
                    e.preventDefault();
                    return false;
                }

                // Disable submit button to prevent double submission
                $('#submitButton').prop('disabled', true);
                return true;
            });
        });
    </script>
}