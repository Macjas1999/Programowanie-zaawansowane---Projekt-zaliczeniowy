@model List<Projekt_zaliczeniowy.Models.Lesson>
@{
    ViewData["Title"] = "Kalendarz zajęć";
    var today = DateTime.Today;
    var selectedDate = ViewBag.SelectedDate ?? today;
    var startOfWeek = selectedDate.AddDays(-(int)selectedDate.DayOfWeek);
    var weekDays = new List<DateTime>();
    for (int i = 0; i < 7; i++)
    {
        weekDays.Add(startOfWeek.AddDays(i));
    }
    var timeSlots = Enumerable.Range(8, 12).ToList(); // 8:00 - 19:00
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h2>Kalendarz zajęć</h2>
            <p class="text-muted">Twój harmonogram lekcji</p>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            <div class="btn-group">
                <a href="@Url.Action("Calendar", new { date = startOfWeek.AddDays(-7) })" 
                   class="btn btn-outline-primary">
                    <i class="fas fa-chevron-left"></i> Poprzedni tydzień
                </a>
                <a href="@Url.Action("Calendar", new { date = today })" 
                   class="btn btn-outline-primary @(selectedDate.Date == today.Date ? "active" : "")">
                    Dzisiaj
                </a>
                <a href="@Url.Action("Calendar", new { date = startOfWeek.AddDays(7) })" 
                   class="btn btn-outline-primary">
                    Następny tydzień <i class="fas fa-chevron-right"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 10%">Godzina</th>
                                    @foreach (var day in weekDays)
                                    {
                                        <th style="width: 13%" class="text-center @(day.Date == today.Date ? "table-info" : "")">
                                            @day.ToString("dddd")<br />
                                            @day.ToString("dd.MM")
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var hour in timeSlots)
                                {
                                    <tr>
                                        <td class="align-middle">@($"{hour}:00")</td>
                                        @foreach (var day in weekDays)
                                        {
                                            var currentSlot = day.Date.AddHours(hour);
                                            var lesson = FindLesson(Model, day.Date, hour);
                                            var availability = FindAvailability(ViewBag.AvailableSlots as List<Projekt_zaliczeniowy.Models.Availability>, day.Date, hour);

                                            <td class="align-middle text-center">
                                                @if (lesson != null)
                                                {
                                                    <div class="lesson-block @GetLessonStatusClass(lesson.Status)" 
                                                         onclick="showLessonDetails(@lesson.Id)">
                                                        <strong>@lesson.Name</strong><br />
                                                        <small>@lesson.Teacher.FirstName @lesson.Teacher.LastName</small>
                                                        <span class="badge @GetStatusBadge(lesson.Status)">
                                                            @GetStatusText(lesson.Status)
                                                        </span>
                                                    </div>
                                                }
                                                else if (availability != null && currentSlot > DateTime.Now)
                                                {
                                                    <button class="btn btn-outline-success btn-sm" 
                                                            onclick="bookLesson(@availability.Id)">
                                                        <i class="fas fa-plus"></i> Zarezerwuj
                                                    </button>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal szczegółów lekcji -->
<div class="modal fade" id="lessonDetailsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Szczegóły lekcji</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .lesson-block {
            padding: 8px;
            border-radius: 4px;
            cursor: pointer;
        }

        .lesson-status-scheduled {
            background-color: #e3f2fd;
            border: 1px solid #90caf9;
        }

        .lesson-status-in-progress {
            background-color: #fff3e0;
            border: 1px solid #ffb74d;
        }

        .lesson-status-completed {
            background-color: #e8f5e9;
            border: 1px solid #81c784;
        }

        .lesson-status-cancelled {
            background-color: #ffebee;
            border: 1px solid #ef9a9a;
        }
    </style>
}

@section Scripts {
    <script>
        function showLessonDetails(lessonId) {
            $('#lessonDetailsModal').modal('show');
            $.get(`/Student/LessonDetails/${lessonId}`, function(data) {
                $('#lessonDetailsModal .modal-body').html(data);
            });
        }

        function bookLesson(availabilityId) {
            // Get subjects for the tutor
            $.get(`/Student/GetTeacherSubjects/${availabilityId}`)
                .done(function(subjects) {
                    if (subjects && subjects.length > 0) {
                        // Create and show booking form
                        var form = $('<form>').addClass('booking-form');
                        
                        // Add subject dropdown
                        var subjectGroup = $('<div>').addClass('mb-3');
                        var subjectLabel = $('<label>').addClass('form-label').text('Wybierz przedmiot:');
                        var subjectSelect = $('<select>').addClass('form-select').attr('required', true);
                        subjectSelect.append($('<option>').val('').text('-- Wybierz przedmiot --'));
                        subjects.forEach(function(subject) {
                            subjectSelect.append($('<option>').val(subject.id).text(subject.name));
                        });
                        subjectGroup.append(subjectLabel, subjectSelect);
                        
                        // Add notes field
                        var notesGroup = $('<div>').addClass('mb-3');
                        var notesLabel = $('<label>').addClass('form-label').text('Uwagi do lekcji:');
                        var notesTextarea = $('<textarea>').addClass('form-control').attr('rows', 3);
                        notesGroup.append(notesLabel, notesTextarea);
                        
                        // Add submit button
                        var submitBtn = $('<button>').addClass('btn btn-primary')
                            .text('Zarezerwuj')
                            .click(function(e) {
                                e.preventDefault();
                                if (!subjectSelect.val()) {
                                    alert('Proszę wybrać przedmiot');
                                    return;
                                }
                                
                                var bookingData = {
                                    availabilityId: availabilityId,
                                    subjectId: subjectSelect.val(),
                                    notes: notesTextarea.val(),
                                    subjectName: subjectSelect.find('option:selected').text()
                                };
                                
                                $.post('/Student/BookLesson', bookingData)
                                    .done(function(response) {
                                        if (response.success) {
                                            location.reload();
                                        } else {
                                            alert('Wystąpił błąd podczas rezerwacji lekcji');
                                        }
                                    })
                                    .fail(function() {
                                        alert('Wystąpił błąd podczas rezerwacji lekcji');
                                    });
                            });
                        
                        form.append(subjectGroup, notesGroup, submitBtn);
                        
                        // Show in modal
                        $('#lessonDetailsModal .modal-title').text('Zarezerwuj lekcję');
                        $('#lessonDetailsModal .modal-body').empty().append(form);
                        $('#lessonDetailsModal').modal('show');
                    } else {
                        alert('Nie znaleziono dostępnych przedmiotów dla tego nauczyciela');
                    }
                })
                .fail(function() {
                    alert('Wystąpił błąd podczas pobierania przedmiotów');
                });
        }
    </script>
}

@functions {
    private Projekt_zaliczeniowy.Models.Lesson FindLesson(List<Projekt_zaliczeniowy.Models.Lesson> lessons, DateTime date, int hour)
    {
        foreach (var lesson in lessons)
        {
            if (lesson.StartTime.Date == date && lesson.StartTime.Hour == hour)
            {
                return lesson;
            }
        }
        return null;
    }

    private Projekt_zaliczeniowy.Models.Availability FindAvailability(List<Projekt_zaliczeniowy.Models.Availability> availabilities, DateTime date, int hour)
    {
        if (availabilities == null) return null;
        
        foreach (var availability in availabilities)
        {
            if (availability.StartTime.Date == date && availability.StartTime.Hour == hour)
            {
                return availability;
            }
        }
        return null;
    }

    string GetLessonStatusClass(LessonStatus status)
    {
        return status switch
        {
            LessonStatus.Scheduled => "lesson-status-scheduled",
            LessonStatus.InProgress => "lesson-status-in-progress",
            LessonStatus.Completed => "lesson-status-completed",
            LessonStatus.Cancelled => "lesson-status-cancelled",
            _ => ""
        };
    }

    string GetStatusBadge(LessonStatus status)
    {
        return status switch
        {
            LessonStatus.Scheduled => "bg-primary",
            LessonStatus.InProgress => "bg-warning",
            LessonStatus.Completed => "bg-success",
            LessonStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    string GetStatusText(LessonStatus status)
    {
        return status switch
        {
            LessonStatus.Scheduled => "Zaplanowana",
            LessonStatus.InProgress => "W trakcie",
            LessonStatus.Completed => "Zakończona",
            LessonStatus.Cancelled => "Anulowana",
            _ => "Nieznany"
        };
    }
}