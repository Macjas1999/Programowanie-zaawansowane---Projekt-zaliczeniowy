@model IEnumerable<Lesson>
@{
    ViewData["Title"] = "Terminarz zajęć";
    var currentDate = DateTime.Now;
    var startOfWeek = currentDate.AddDays(-(int)currentDate.DayOfWeek);
    var availableHours = Enumerable.Range(8, 12); // 8:00 - 19:00
}

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Terminarz zajęć</h2>
            <div class="btn-group">
                <a href="@Url.Action("Calendar", new { date = currentDate.AddDays(-7).ToString("yyyy-MM-dd") })"
                   class="btn btn-outline-primary">
                    <i class="fas fa-chevron-left"></i> Poprzedni tydzień
                </a>
                <a href="@Url.Action("Calendar", new { date = currentDate.ToString("yyyy-MM-dd") })"
                   class="btn btn-outline-primary">
                    Dzisiaj
                </a>
                <a href="@Url.Action("Calendar", new { date = currentDate.AddDays(7).ToString("yyyy-MM-dd") })"
                   class="btn btn-outline-primary">
                    Następny tydzień <i class="fas fa-chevron-right"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered calendar-table">
                    <thead>
                        <tr>
                            <th>Godzina</th>
                            @for (var day = 0; day < 7; day++)
                            {
                                var currentDay = startOfWeek.AddDays(day);
                                <th class="text-center @(currentDay.Date == DateTime.Now.Date ? "table-primary" : "")">
                                    @currentDay.ToString("dddd")<br />
                                    @currentDay.ToString("dd.MM")
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var hour in availableHours)
                        {
                            <tr>
                                <td class="hour-cell">@($"{hour:00}:00")</td>
                                @for (var day = 0; day < 7; day++)
                                {
                                    var currentSlot = startOfWeek.AddDays(day).AddHours(hour);
                                    var lesson = Model.FirstOrDefault(l =>
                                    l.StartTime.Date == currentSlot.Date &&
                                    l.StartTime.Hour == currentSlot.Hour);

                                    @if (lesson != null)
                                    {
                                        <td class="lesson-cell @GetLessonStatusClass(lesson.Status)"
                                            data-toggle="tooltip"
                                            data-placement="top"
                                            title="@GetLessonTooltip(lesson)">
                                            <div class="lesson-details">
                                                <strong>@lesson.Student.FirstName @lesson.Student.LastName</strong><br />
                                                <small>@lesson.Name</small>
                                            </div>
                                        </td>
                                    }
                                    else
                                    {
                                        <td class="empty-cell"
                                            data-date="@currentSlot.ToString("yyyy-MM-dd")"
                                            data-hour="@hour">
                                            <button class="btn btn-sm btn-outline-success add-availability-btn"
                                                    onclick="addAvailability('@currentSlot.ToString("yyyy-MM-dd")', @hour)">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="lessonDetailsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Szczegóły lekcji</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Zostanie wypełnione przez JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Zamknij</button>
                <button type="button" class="btn btn-primary" onclick="editLesson()">Edytuj</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .calendar-table {
            table-layout: fixed;
        }

        .calendar-table th,
        .calendar-table td {
            vertical-align: middle;
            height: 80px;
        }

        .hour-cell {
            width: 80px;
            font-weight: bold;
            text-align: center;
        }

        .lesson-cell {
            padding: 5px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .lesson-cell:hover {
            opacity: 0.9;
        }

        .lesson-status-scheduled {
            background-color: #e3f2fd;
        }

        .lesson-status-in-progress {
            background-color: #fff3cd;
        }

        .lesson-status-completed {
            background-color: #d4edda;
        }

        .lesson-status-cancelled {
            background-color: #f8d7da;
        }

        .empty-cell {
            text-align: center;
        }

        .add-availability-btn {
            opacity: 0.3;
            transition: opacity 0.2s;
        }

        .empty-cell:hover .add-availability-btn {
            opacity: 1;
        }

        .lesson-details {
            font-size: 0.9em;
            line-height: 1.2;
        }
    </style>
}

@section Scripts {
    <script>
        function getStatusClass(status) {
            switch (status) {
                case 'Scheduled': return 'lesson-status-scheduled';
                case 'InProgress': return 'lesson-status-in-progress';
                case 'Completed': return 'lesson-status-completed';
                case 'Cancelled': return 'lesson-status-cancelled';
                default: return '';
            }
        }

        function getLessonTooltip(lesson) {
            return `Student: ${lesson.student.firstName} ${lesson.student.lastName}\n` +
                   `Przedmiot: ${lesson.subject?.name}\n` +
                   `Godzina: ${formatTime(lesson.startTime)} - ${formatTime(lesson.endTime)}`;
        }

        function addAvailability(date, hour) {
            // Wywołaj endpoint API do dodawania dostępności
            $.post('/Teacher/AddAvailability', {
                date: date,
                hour: hour
            })
            .done(function(response) {
                location.reload();
            })
            .fail(function(error) {
                alert('Wystąpił błąd podczas dodawania dostępności');
            });
        }

        function showLessonDetails(lessonId) {
            $.get(`/Teacher/LessonDetails/${lessonId}`)
                .done(function(response) {
                    $('#lessonDetailsModal .modal-body').html(response);
                    $('#lessonDetailsModal').modal('show');
                });
        }

        function editLesson() {
            const lessonId = $('#lessonDetailsModal').data('lessonId');
            window.location.href = `/Teacher/EditLesson/${lessonId}`;
        }

        // Inicjalizacja tooltipów
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
}

@functions {
    string GetLessonStatusClass(LessonStatus status)
    {
        return status switch
        {
            LessonStatus.Scheduled => "lesson-status-scheduled",
            LessonStatus.InProgress => "lesson-status-in-progress",
            LessonStatus.Completed => "lesson-status-completed",
            LessonStatus.Cancelled => "lesson-status-cancelled",
            _ => ""
        };
    }

    string GetLessonTooltip(Lesson lesson)
    {
        return $"Student: {lesson.Student.FirstName} {lesson.Student.LastName}\n" +
               $"Przedmiot: {lesson.Name}\n" +
               $"Godzina: {lesson.StartTime:HH:mm} - {lesson.EndTime:HH:mm}";
    }
}